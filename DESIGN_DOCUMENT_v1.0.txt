================================================================================
VisionMakers 상담 시스템 - 설계 문서 v1.0
================================================================================
문서 버전: 1.0
작성일: 2024-09-17
작성자: Claude AI Assistant
목적: 듀얼 트랙 상담 시스템 설계 및 구현 가이드
================================================================================

📋 목차
================================================================================
1. 프로젝트 개요
2. 요구사항 분석
3. 시스템 아키텍처
4. 사용자 인터페이스 설계
5. 데이터 모델 설계
6. API 설계
7. 보안 설계
8. 성능 및 확장성
9. 품질 관리
10. 배포 및 운영

================================================================================
1. 프로젝트 개요
================================================================================

1.1 프로젝트 배경
────────────────────────────────────────────────────────────────────────────
• 기존 VisionMakers 웹사이트의 단순한 상담 폼 개선 필요성
• MiceHub 벤치마킹을 통한 현대적 UX 패턴 도입
• 상담 완료율 및 품질 향상을 위한 체계적 접근

1.2 프로젝트 목표
────────────────────────────────────────────────────────────────────────────
• 상담 완료율 20% 증대
• 상담 품질 50% 향상
• 초기 상담 시간 30% 단축
• 관리 효율성 향상

1.3 핵심 가치 제안
────────────────────────────────────────────────────────────────────────────
• 사용자 맞춤형 상담 경험 제공
• 심리적 부담 최소화를 통한 완료율 증대
• 체계적 데이터 수집으로 상담 품질 향상

================================================================================
2. 요구사항 분석
================================================================================

2.1 기능 요구사항
────────────────────────────────────────────────────────────────────────────
FR-001: 듀얼 트랙 상담 시스템
• 가이드 트랙: 4단계 구조화된 질문 방식
• 자유 트랙: 자유로운 설명 방식

FR-002: 가이드 트랙 상세 기능
• Step 1: 서비스 종류 선택 (홈페이지, 쇼핑몰, 예약, 회원제, 기타)
• Step 2: 프로젝트 규모 및 예산 설정
• Step 3: 일정 및 특별 요청사항
• Step 4: 연락처 정보 입력

FR-003: 자유 트랙 기능
• 프로젝트 자유 설명 (최소 20자, 최대 2000자)
• 선택적 예산 및 일정 입력
• 연락처 정보 입력

FR-004: 공통 기능
• 실시간 유효성 검사
• 자동 저장 기능 (localStorage)
• 진행률 표시
• 반응형 디자인

2.2 비기능 요구사항
────────────────────────────────────────────────────────────────────────────
NFR-001: 성능
• 페이지 로딩 시간 < 2초
• LCP (Largest Contentful Paint) < 2.5초
• 상호작용 응답 시간 < 0.5초

NFR-002: 사용성
• 모바일 우선 설계
• WCAG 2.1 AA 접근성 준수 (색상 대비 4.5:1 이상)
• 최소 폰트 크기 16px 준수
• 직관적 네비게이션

NFR-003: 보안
• XSS 공격 방지
• 입력 데이터 검증 및 정화
• HTTPS 통신

NFR-004: 호환성
• 모던 브라우저 지원 (Chrome, Firefox, Safari, Edge)
• iOS, Android 모바일 지원

================================================================================
3. 시스템 아키텍처
================================================================================

3.1 전체 아키텍처
────────────────────────────────────────────────────────────────────────────
Frontend (Next.js)
├── Pages Router
├── React Context API (상태 관리)
├── Tailwind CSS (스타일링)
└── TypeScript (타입 안전성)

Backend (Next.js API)
├── API Routes
├── Slack Webhook 연동
└── 데이터 검증 및 정화

External Services
├── Slack (알림 시스템)
└── Vercel (호스팅)

3.2 컴포넌트 아키텍처
────────────────────────────────────────────────────────────────────────────
src/
├── components/
│   ├── consultation/
│   │   ├── ConsultationLayout (레이아웃)
│   │   ├── common/ (공통 컴포넌트)
│   │   └── forms/ (폼 컴포넌트)
├── contexts/ (전역 상태)
├── pages/ (라우팅)
├── types/ (타입 정의)
├── utils/ (유틸리티)
└── constants/ (상수)

3.3 상태 관리 설계
────────────────────────────────────────────────────────────────────────────
• React Context API 사용
• useReducer 패턴으로 복잡한 상태 관리
• localStorage 자동 동기화
• 타입 안전성 보장

================================================================================
4. 사용자 인터페이스 설계
================================================================================

4.1 디자인 원칙
────────────────────────────────────────────────────────────────────────────
• 심플함과 명확성
• 인지적 부하 최소화 (3-5-7 선택 원칙)
• 점진적 공개 (Progressive Disclosure)
• 시각적 계층 구조

4.2 컬러 시스템
────────────────────────────────────────────────────────────────────────────
Primary: #EF4444 (Red-500) - CTA, 강조, 행동 유도
Secondary: #1F2937 (Gray-800) - 헤더, 텍스트, 프레임
Accent: #F59E0B (Yellow-500) - 할인, 특별 혜택, 하이라이트
Success: #10B981 (Green-500) - 성공, 완료, 체크
Error: #EF4444 (Red-500) - 에러, 경고
Background: #F9FAFB (Gray-50) - 배경, 카드

4.3 타이포그래피
────────────────────────────────────────────────────────────────────────────
• 제목: 48px/1.2, bold (Heading 1)
• 부제목: 36px/1.3, bold (Heading 2)
• 소제목: 24px/1.4, semibold (Heading 3)
• 본문: 16px/1.5, normal (Body)
• 캡션: 14px/1.4, normal (Caption)

4.4 레이아웃 그리드
────────────────────────────────────────────────────────────────────────────
• 모바일: 1열 레이아웃
• 태블릿: 2열 레이아웃 (768px+)
• 데스크톱: 최대 너비 제한 (1024px)

================================================================================
5. 데이터 모델 설계
================================================================================

5.1 핵심 타입 정의
────────────────────────────────────────────────────────────────────────────
interface GuidedConsultation {
  id: string;
  type: 'guided';
  submittedAt: Date;
  serviceType: ServiceType;
  projectSize: ProjectSize;
  budget: Budget;
  timeline: Timeline;
  importantFeatures: ImportantFeature[];
  additionalRequests?: string;
  contact: ContactInfo;
}

interface FreeConsultation {
  id: string;
  type: 'free';
  submittedAt: Date;
  projectDescription: string;
  budget?: string;
  timeline?: string;
  contact: ContactInfo;
}

interface ContactInfo {
  name: string;
  phone: string;
  email: string;
  company?: string;
  preferredContactTime?: ContactTime;
}

5.2 유니온 타입
────────────────────────────────────────────────────────────────────────────
type ServiceType = 'homepage' | 'shopping' | 'booking' | 'membership' | 'other';
type ProjectSize = 'small' | 'medium' | 'large';
type Budget = '100-300' | '300-800' | '800-1500' | '1500+' | 'consult';
type Timeline = '1month' | '2-3months' | '6months' | 'flexible';

================================================================================
6. API 설계
================================================================================

6.1 엔드포인트 명세
────────────────────────────────────────────────────────────────────────────
POST /api/consultation-submit
• 목적: 상담 신청 데이터 처리
• 인증: 불필요
• 데이터 검증: 서버사이드 유효성 검사
• 응답: 상담 신청 번호 반환

6.2 요청/응답 스키마
────────────────────────────────────────────────────────────────────────────
Request Body:
{
  "type": "guided" | "free",
  "serviceType": string, // guided only
  "projectSize": string, // guided only
  "budget": string,
  "timeline": string,
  "importantFeatures": string[], // guided only
  "additionalRequests": string,
  "projectDescription": string, // free only
  "contact": ContactInfo
}

Response:
{
  "success": boolean,
  "consultationId": string,
  "message": string
}

6.3 에러 처리
────────────────────────────────────────────────────────────────────────────
400: Bad Request (유효성 검사 실패)
405: Method Not Allowed (POST 외 방법)
500: Internal Server Error (서버 오류)

================================================================================
7. 보안 설계
================================================================================

7.1 입력 데이터 보안
────────────────────────────────────────────────────────────────────────────
• XSS 방지: HTML 태그 제거 및 특수문자 이스케이프
• 입력 길이 제한: DoS 공격 방지
• 의심스러운 패턴 감지: 스크립트 태그, 이벤트 핸들러 등

7.2 API 보안
────────────────────────────────────────────────────────────────────────────
• 입력 데이터 검증 (서버사이드)
• Rate Limiting (요청 속도 제한)
• CORS 정책 적용
• HTTPS 강제 사용

7.3 데이터 처리 보안
────────────────────────────────────────────────────────────────────────────
• 개인정보 최소 수집 원칙
• 데이터 전송 암호화
• 로깅 시 민감정보 제외

================================================================================
8. 성능 및 확장성
================================================================================

8.1 성능 최적화
────────────────────────────────────────────────────────────────────────────
• Next.js 이미지 최적화
• 코드 스플리팅 적용
• CSS 최적화 (Tailwind CSS Purge)
• 브라우저 캐싱 활용

8.2 확장성 고려사항
────────────────────────────────────────────────────────────────────────────
• 컴포넌트 재사용성
• 설정 기반 확장 (상수 파일)
• 모듈식 아키텍처
• API 버전 관리 준비

================================================================================
9. 품질 관리
================================================================================

9.1 코드 품질
────────────────────────────────────────────────────────────────────────────
• TypeScript 엄격 모드
• ESLint 규칙 적용
• Prettier 코드 포매팅
• 코드 리뷰 프로세스

9.2 테스트 전략
────────────────────────────────────────────────────────────────────────────
• 유닛 테스트: Jest + React Testing Library
• 통합 테스트: API 엔드포인트
• E2E 테스트: Cypress
• 성능 테스트: Lighthouse
• 접근성 테스트: axe-core

9.3 모니터링
────────────────────────────────────────────────────────────────────────────
• 에러 추적: Sentry
• 성능 모니터링: Vercel Analytics
• 사용자 행동 분석: Google Analytics

================================================================================
10. 배포 및 운영
================================================================================

10.1 배포 전략
────────────────────────────────────────────────────────────────────────────
• Vercel 자동 배포
• Preview 환경 활용
• 롤백 계획 수립

10.2 환경 관리
────────────────────────────────────────────────────────────────────────────
• Development: 로컬 개발
• Staging: 테스트 환경
• Production: 실제 서비스

10.3 운영 가이드
────────────────────────────────────────────────────────────────────────────
• 상담 신청 모니터링
• 에러 대응 프로세스
• 정기 업데이트 계획

================================================================================
부록 A: 기술 스택 상세
================================================================================
• Frontend: Next.js 14, React 18, TypeScript
• Styling: Tailwind CSS
• State Management: React Context API
• Validation: Custom utilities
• API: Next.js API Routes
• Deployment: Vercel
• Integration: Slack Webhook

================================================================================
부록 B: 참고 자료
================================================================================
• MiceHub UX 패턴 분석
• Clean Architecture 원칙
• React Best Practices
• Next.js Documentation
• Accessibility Guidelines (WCAG 2.1)

================================================================================
문서 변경 이력
================================================================================
v1.0 (2024-09-17): 초기 설계 문서 작성
- 전체 시스템 아키텍처 정의
- UI/UX 설계 원칙 수립
- 보안 및 성능 요구사항 정의
- 품질 관리 프로세스 구축

================================================================================